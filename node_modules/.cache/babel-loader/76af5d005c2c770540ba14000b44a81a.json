{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\project\\\\bulletin-board\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nvar randomColor = require(\"randomcolor\");\n\nconst [item, setItem] = useState(\"\"); // this is the value of input field. Initialize as empty string\n\nconst [items, setItems] = useState(JSON.parse(localStorage, getItem(\"items\")) || []);\n\nconst keyPress = event => {\n  let code = event.keyCode || event.which;\n\n  if (code === 13) {\n    newItem();\n  }\n};\n\nconst newItem = () => {\n  if (item.trim() !== \"\") {\n    // if input is not blank, create a new item object\n    const newItem = {\n      id: uuidv4(),\n      item: item,\n      color: randomColor({\n        luminosity: \"light\"\n      }),\n      defaultPos: {\n        x: 100,\n        y: 0\n      }\n    }; // add this new item object to the items array\n\n    setItems(items => [...items, newItem]); // reset item value to empty string\n\n    setItem(\"\");\n  } else {\n    alert(\"Enter a item please\");\n    setItem(\"\");\n  }\n}; //this function is called every time we stop dragging the note. that way, we can save the final position of the note\n// to our items array in localStorage\n\n\nconst updatePos = (data, index) => {\n  let newArr = [...items];\n  newArr[index].defaultPos = {\n    x: data.x,\n    y: data.y\n  };\n  setItems(newArr);\n}; // in this function the note will be deleted from both on screen and from the items array in localStorage\n\n\nconst deleteNote = id => {\n  setItems(items.filter(item => item.id !== id));\n};\n\nuseEffect(() => {\n  localStorage.setItem(\"items\", JSON.stringify(items));\n}, [items]);\n\n/*#__PURE__*/\n_jsxDEV(\"input\", {\n  value: item,\n  onChange: e => setItem(e.target.value),\n  placeholder: \"Enter something...\",\n  onKeyPress: e => keyPress(e)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 1\n}, this);\n\n/*#__PURE__*/\n_jsxDEV(\"button\", {\n  onClick: newItem,\n  children: \"ENTER\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 1\n}, this);\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: items.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        defaultPosition: item.defaultPos,\n        onStop: (e, data) => {\n          updatePos(data, index);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: item.color\n          },\n          className: \"box\",\n          children: [`${item.item}`, /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"delete\",\n            onClick: e => deleteNote(item.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/project/bulletin-board/src/App.js"],"names":["React","useState","useEffect","Draggable","v4","uuidv4","randomColor","require","item","setItem","items","setItems","JSON","parse","localStorage","getItem","keyPress","event","code","keyCode","which","newItem","trim","id","color","luminosity","defaultPos","x","y","alert","updatePos","data","index","newArr","deleteNote","filter","stringify","e","target","value","App","map","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC,C,CAAsC;;AACtC,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAChCW,IAAI,CAACC,KAAL,CAAWC,YAAX,EAAyBC,OAAO,CAAC,OAAD,CAAhC,KAA8C,EADd,CAAlC;;AAIA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAIC,IAAI,GAAGD,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,KAAlC;;AACA,MAAIF,IAAI,KAAK,EAAb,EAAiB;AACfG,IAAAA,OAAO;AACR;AACF,CALD;;AAOA,MAAMA,OAAO,GAAG,MAAM;AACpB,MAAIb,IAAI,CAACc,IAAL,OAAgB,EAApB,EAAwB;AACtB;AACA,UAAMD,OAAO,GAAG;AACdE,MAAAA,EAAE,EAAElB,MAAM,EADI;AAEdG,MAAAA,IAAI,EAAEA,IAFQ;AAGdgB,MAAAA,KAAK,EAAElB,WAAW,CAAC;AAAEmB,QAAAA,UAAU,EAAE;AAAd,OAAD,CAHJ;AAIdC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb;AAJE,KAAhB,CAFsB,CAQtB;;AACAjB,IAAAA,QAAQ,CAAED,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAWW,OAAX,CAAZ,CAAR,CATsB,CAUtB;;AACAZ,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAZD,MAYO;AACLoB,IAAAA,KAAK,CAAC,qBAAD,CAAL;AACApB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,CAjBD,C,CAmBA;AACA;;;AAEA,MAAMqB,SAAS,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,MAAIC,MAAM,GAAG,CAAC,GAAGvB,KAAJ,CAAb;AACAuB,EAAAA,MAAM,CAACD,KAAD,CAAN,CAAcN,UAAd,GAA2B;AAAEC,IAAAA,CAAC,EAAEI,IAAI,CAACJ,CAAV;AAAaC,IAAAA,CAAC,EAAEG,IAAI,CAACH;AAArB,GAA3B;AACAjB,EAAAA,QAAQ,CAACsB,MAAD,CAAR;AACD,CAJD,C,CAMA;;;AAEA,MAAMC,UAAU,GAAIX,EAAD,IAAQ;AACzBZ,EAAAA,QAAQ,CAACD,KAAK,CAACyB,MAAN,CAAc3B,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,CAFD;;AAIArB,SAAS,CAAC,MAAM;AACdY,EAAAA,YAAY,CAACL,OAAb,CAAqB,OAArB,EAA8BG,IAAI,CAACwB,SAAL,CAAe1B,KAAf,CAA9B;AACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA;AAAA;AACE,EAAA,KAAK,EAAEF,IADT;AAEE,EAAA,QAAQ,EAAG6B,CAAD,IAAO5B,OAAO,CAAC4B,CAAC,CAACC,MAAF,CAASC,KAAV,CAF1B;AAGE,EAAA,WAAW,EAAC,oBAHd;AAIE,EAAA,UAAU,EAAGF,CAAD,IAAOrB,QAAQ,CAACqB,CAAD;AAJ7B;AAAA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAQ,EAAA,OAAO,EAAEhB,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,SAASmB,GAAT,GAAe;AACb,sBACE;AAAA,cACG9B,KAAK,CAAC+B,GAAN,CAAU,CAACjC,IAAD,EAAOwB,KAAP,KAAiB;AAC1B,0BACE,QAAC,SAAD;AAEE,QAAA,eAAe,EAAExB,IAAI,CAACkB,UAFxB;AAGE,QAAA,MAAM,EAAE,CAACW,CAAD,EAAIN,IAAJ,KAAa;AACnBD,UAAAA,SAAS,CAACC,IAAD,EAAOC,KAAP,CAAT;AACD,SALH;AAAA,+BAOE;AAAK,UAAA,KAAK,EAAE;AAAEU,YAAAA,eAAe,EAAElC,IAAI,CAACgB;AAAxB,WAAZ;AAA6C,UAAA,SAAS,EAAC,KAAvD;AAAA,qBACI,GAAEhB,IAAI,CAACA,IAAK,EADhB,eAEE;AAAQ,YAAA,EAAE,EAAC,QAAX;AAAoB,YAAA,OAAO,EAAG6B,CAAD,IAAOH,UAAU,CAAC1B,IAAI,CAACe,EAAN,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF,SACOf,IAAI,CAACe,EADZ;AAAA;AAAA;AAAA;AAAA,cADF;AAgBD,KAjBA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;KAvBQiB,G;AAyBT,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport { v4 as uuidv4 } from \"uuid\";\nvar randomColor = require(\"randomcolor\");\n\nconst [item, setItem] = useState(\"\"); // this is the value of input field. Initialize as empty string\nconst [items, setItems] = useState(\n  JSON.parse(localStorage, getItem(\"items\")) || []\n);\n\nconst keyPress = (event) => {\n  let code = event.keyCode || event.which;\n  if (code === 13) {\n    newItem();\n  }\n};\n\nconst newItem = () => {\n  if (item.trim() !== \"\") {\n    // if input is not blank, create a new item object\n    const newItem = {\n      id: uuidv4(),\n      item: item,\n      color: randomColor({ luminosity: \"light\" }),\n      defaultPos: { x: 100, y: 0 },\n    };\n    // add this new item object to the items array\n    setItems((items) => [...items, newItem]);\n    // reset item value to empty string\n    setItem(\"\");\n  } else {\n    alert(\"Enter a item please\");\n    setItem(\"\");\n  }\n};\n\n//this function is called every time we stop dragging the note. that way, we can save the final position of the note\n// to our items array in localStorage\n\nconst updatePos = (data, index) => {\n  let newArr = [...items];\n  newArr[index].defaultPos = { x: data.x, y: data.y };\n  setItems(newArr);\n};\n\n// in this function the note will be deleted from both on screen and from the items array in localStorage\n\nconst deleteNote = (id) => {\n  setItems(items.filter((item) => item.id !== id));\n};\n\nuseEffect(() => {\n  localStorage.setItem(\"items\", JSON.stringify(items));\n}, [items]);\n\n<input\n  value={item}\n  onChange={(e) => setItem(e.target.value)}\n  placeholder=\"Enter something...\"\n  onKeyPress={(e) => keyPress(e)}\n/>;\n<button onClick={newItem}>ENTER</button>;\n\nfunction App() {\n  return (\n    <div>\n      {items.map((item, index) => {\n        return (\n          <Draggable\n            key={item.id}\n            defaultPosition={item.defaultPos}\n            onStop={(e, data) => {\n              updatePos(data, index);\n            }}\n          >\n            <div style={{ backgroundColor: item.color }} className=\"box\">\n              {`${item.item}`}\n              <button id=\"delete\" onClick={(e) => deleteNote(item.id)}>\n                X\n              </button>\n            </div>\n          </Draggable>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}