{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\project\\\\bulletin-board\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nlet randomColor = require(\"randomcolor\");\n\nfunction App() {\n  _s();\n\n  const [item, setItem] = useState(\"\"); // this is the value of input field. Initialize as empty string\n\n  const [items, setItems] = useState(JSON.parse(localStorage, getItem(\"items\")) || []);\n\n  const newitem = () => {\n    if (item.trim() !== \"\") {\n      // if input is not blank, create a new item object\n      const newItem = {\n        id: uuidv4(),\n        item: item,\n        color: randomColor({\n          luminosity: \"light\"\n        }),\n        defaultPos: {\n          x: 100,\n          y: 0\n        }\n      }; // add this new item object to the items array\n\n      setItems(items => [...items, newItem]); // reset item value to empty string\n\n      setItem(\"\");\n    } else {\n      alert(\"Enter a item please\");\n      setItem(\"\");\n    }\n  };\n\n  const keyPress = event => {\n    let code = event.keyCode || event.which;\n\n    if (code === 13) {\n      newitem();\n    }\n  }; //this function is called every time we stop dragging the note. that way, we can save the final position of the note\n  // to our items array in localStorage\n\n\n  const updatePos = (data, index) => {\n    let newArr = [...items];\n    newArr[index].defaultPos = {\n      x: data.x,\n      y: data.y\n    };\n    setItems(newArr);\n  }; // in this function the note will be deleted from both on screen and from the items array in localStorage\n\n\n  const deleteNote = id => {\n    setItems(items.filter(item => item.id !== id));\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"items\", JSON.stringify(items));\n  }, [items]); //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: item,\n        onChange: e => setItem(e.target.value),\n        placeholder: \"Enter something...\",\n        onKeyPress: e => keyPress(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newitem,\n        children: \"ENTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), items.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        defaultPosition: item.defaultPos,\n        onStop: data => {\n          updatePos(data, index);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: item.color\n          },\n          className: \"box\",\n          children: [`${item.item}`, /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"delete\",\n            onClick: () => deleteNote(item.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sIgZzwXyxXHGh4e9b0ySeWUw0lI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/project/bulletin-board/src/App.js"],"names":["React","useState","useEffect","Draggable","v4","uuidv4","randomColor","require","App","item","setItem","items","setItems","JSON","parse","localStorage","getItem","newitem","trim","newItem","id","color","luminosity","defaultPos","x","y","alert","keyPress","event","code","keyCode","which","updatePos","data","index","newArr","deleteNote","filter","stringify","e","target","value","map","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport { v4 as uuidv4 } from \"uuid\";\nlet randomColor = require(\"randomcolor\");\n\nfunction App() {\n  const [item, setItem] = useState(\"\"); // this is the value of input field. Initialize as empty string\n  const [items, setItems] = useState(\n    JSON.parse(localStorage, getItem(\"items\")) || []\n  );\n\n  const newitem = () => {\n    if (item.trim() !== \"\") {\n      // if input is not blank, create a new item object\n      const newItem = {\n        id: uuidv4(),\n        item: item,\n        color: randomColor({ luminosity: \"light\" }),\n        defaultPos: { x: 100, y: 0 },\n      };\n      // add this new item object to the items array\n      setItems((items) => [...items, newItem]);\n      // reset item value to empty string\n      setItem(\"\");\n    } else {\n      alert(\"Enter a item please\");\n      setItem(\"\");\n    }\n  };\n\n  const keyPress = (event) => {\n    let code = event.keyCode || event.which;\n    if (code === 13) {\n      newitem();\n    }\n  };\n\n  //this function is called every time we stop dragging the note. that way, we can save the final position of the note\n  // to our items array in localStorage\n  const updatePos = (data, index) => {\n    let newArr = [...items];\n    newArr[index].defaultPos = { x: data.x, y: data.y };\n    setItems(newArr);\n  };\n\n  // in this function the note will be deleted from both on screen and from the items array in localStorage\n  const deleteNote = (id) => {\n    setItems(items.filter((item) => item.id !== id));\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"items\", JSON.stringify(items));\n  }, [items]);\n\n  //\n  return (\n    <div className=\"App\">\n      <div id=\"new-item\">\n        <input\n          value={item}\n          onChange={(e) => setItem(e.target.value)}\n          placeholder=\"Enter something...\"\n          onKeyPress={(e) => keyPress(e)}\n        />\n        <button onClick={newitem}>ENTER</button>;\n      </div>\n      {items.map((item, index) => {\n        return (\n          <Draggable\n            key={item.id}\n            defaultPosition={item.defaultPos}\n            onStop={(data) => {\n              updatePos(data, index);\n            }}\n          >\n            <div style={{ backgroundColor: item.color }} className=\"box\">\n              {`${item.item}`}\n              <button id=\"delete\" onClick={() => deleteNote(item.id)}>\n                X\n              </button>\n            </div>\n          </Draggable>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}